/**
 * The HW2Test class provides unit testing for HW2.java.
 *
 * @author   Kevin Nash (kjn33)
 * @version  2015.3.3
 */
import static org.junit.Assert.*;
import org.junit.Test;

public class HW2Test {
    
    @Test
    public void everykToTheNthChar() {        
        String input = "123456789";
        int n = 1;
        assertEquals("When n < 2: the output String should match the input String",
                     "123456789", HW2.everykToTheNthChar(input, n));
        n = 2;
        assertEquals("When n = 2: the output String should contain the 1st, 2nd, 4th, and 8th chars",
                     "1248", HW2.everykToTheNthChar(input, n));
        n = 3;
        assertEquals("When n = 3: the output String should contain the 1st, 3rd, and 9th chars",
                     "139", HW2.everykToTheNthChar(input, n));
        input = "";
        assertEquals("When the input String is empty: the output String should be empty",
                     "", HW2.everykToTheNthChar(input, n));
    }
    
    @Test
    public void containsSubSequence() {        
        String s1 = "abc";
        String s2 = "a";
        assertTrue("The sequence includes the first character: true",
                   HW2.containsSubSequence(s1, s2));
        s2 = "b";
        assertTrue("The sequence includes only middle characters: true",
                   HW2.containsSubSequence(s1, s2));
        s2 = "c";
        assertTrue("The sequence includes the last character: true",
                   HW2.containsSubSequence(s1, s2));
        s2 = "abc";
        assertTrue("The sequence is identical to the input String: true",
                   HW2.containsSubSequence(s1, s2));
        s2 = "def";
        assertFalse("The input String does not contain the sequence: false",
                   HW2.containsSubSequence(s1, s2));
        s2 = "acb";
        assertFalse("The sequence is in the wrong order: false",
                   HW2.containsSubSequence(s1, s2));
        s2 = "abc~";
        assertFalse("The sequence is longer than the input String: false",
                   HW2.containsSubSequence(s1, s2));
        s1 = "";
        s2 = "abc";
        assertFalse("The input String is empty: false",
                   HW2.containsSubSequence(s1, s2));
        s1 = "abc";
        s2 = "";
        assertFalse("The sequence is empty: false",
                   HW2.containsSubSequence(s1, s2));
    }
    
    @Test
    public void subtract() {        
        String s1 = "abc";
        String s2 = "ab";
        assertEquals("Subtraction at the beginning of the String",
                     "c", HW2.subtract(s1, s2));
        s2 = "bc";
        assertEquals("Subtraction at the end of the String",
                     "a", HW2.subtract(s1, s2));
        s2 = "ac";
        assertEquals("Subtraction at the endpoints of the String",
                     "b", HW2.subtract(s1, s2));        
        s2 = "def";
        assertEquals("Subtraction of non-existant chars",
                     "abc", HW2.subtract(s1, s2));
        s2 = "abc";
        assertEquals("Subtraction of the entire input String",
                     "", HW2.subtract(s1, s2));
        s2 = "abc~";
        assertEquals("Subtraction is longer than the input String",
                     "", HW2.subtract(s1, s2));
        s2 = "abc";
        assertEquals("Subtraction is longer than the input String",
                     "", HW2.subtract(s1, s2));
}